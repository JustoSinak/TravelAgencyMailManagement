Implementation of Travel agency Mail management
You are ttasked to develop a full-fledged email management application for a travel agency using django, integrating a machine learning model for automated email sorting and recommendations, and ensuring a seamless user experience through frontend development and API integration.

Part A: Backend development with django and API design
1. Setting up
I'll address each part of the exam systematically, providing detailed solutions for the implementation of the mail management application.

## Part A: Backend Development with Django and API Design

### 1. Setting Up the Environment (5 Marks)

*a) Installing necessary software:*
bash
# Install Python (3.8+ recommended)
sudo apt-get update
sudo apt-get install python3 python3-pip python3-venv

# Install Django and related packages
pip install django djangorestframework python-dotenv django-cors-headers

# For database (PostgreSQL recommended)
pip install psycopg2-binary


*b) Configuring virtual environments:*
bash
python3 -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate

*c) Setting up .env files and security:*
python
# .env file example
SECRET_KEY=your-secret-key-here
DEBUG=True
DB_NAME=mail_db
DB_USER=db_user
DB_PASSWORD=secure_password
DB_HOST=localhost
DB_PORT=5432
EMAIL_API_KEY=your-email-service-key

# settings.py configuration
from dotenv import load_dotenv
import os

load_dotenv()

SECRET_KEY = os.getenv('SECRET_KEY')
DEBUG = os.getenv('DEBUG') == 'True'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
    }
}


### 2. Database Design (10 Marks)

*a) Database schema design:*

Key entities:
- Users
- Emails
- Categories
- Notes
- UserActions (for recommendations)

*b) Example code for models:*
python
# models.py
from django.db import models
from django.contrib.auth.models import AbstractUser

class User(AbstractUser):
    is_admin = models.BooleanField(default=False)
    preferences = models.JSONField(default=dict)

class Category(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        indexes = [
            models.Index(fields=['name']),
        ]

class Email(models.Model):
    PRIORITY_CHOICES = [
        ('H', 'High'),
        ('M', 'Medium'),
        ('L', 'Low'),
    ]
    
    subject = models.CharField(max_length=255)
    body = models.TextField()
    sender = models.EmailField()
    received_at = models.DateTimeField(auto_now_add=True)
    priority = models.CharField(max_length=1, choices=PRIORITY_CHOICES, default='M')
    categories = models.ManyToManyField(Category, related_name='emails')
    is_read = models.BooleanField(default=False)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='emails')
    
    class Meta:
        indexes = [
            models.Index(fields=['subject']),
            models.Index(fields=['sender']),
            models.Index(fields=['received_at']),
            models.Index(fields=['priority']),
            models.Index(fields=['is_read']),
        ]
        ordering = ['-received_at']

class Note(models.Model):
    email = models.ForeignKey(Email, on_delete=models.CASCADE, related_name='notes')
    author = models.ForeignKey(User, on_delete=models.CASCADE)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

class UserAction(models.Model):
    ACTION_TYPES = [
        ('OPEN', 'Email opened'),
        ('REPLY', 'Email replied'),
        ('DELETE', 'Email deleted'),
        ('CATEGORY', 'Category changed'),
    ]
    
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    email = models.ForeignKey(Email, on_delete=models.CASCADE)
    action_type = models.CharField(max_length=10, choices=ACTION_TYPES)
    timestamp = models.DateTimeField(auto_now_add=True)
 metadata = models.JSONField(default=dict)


*c) Serializers and views:*
python
# serializers.py
from rest_framework import serializers
from .models import Email, Category, Note, UserAction

class CategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = Category
        fields = '__all__'

class EmailSerializer(serializers.ModelSerializer):
    categories = CategorySerializer(many=True, read_only=True)
    
    class Meta:
        model = Email
        fields = '__all__'
        read_only_fields = ('user', 'received_at')

class NoteSerializer(serializers.ModelSerializer):
    author = serializers.StringRelatedField()
    
    class Meta:
        model = Note
        fields = '__all__'
        read_only_fields = ('author', 'created_at', 'updated_at')

class UserActionSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserAction
        fields = '__all__'


*d) URL routing for CRUD operations:*
python
# urls.py
from django.urls import path
from rest_framework.routers import DefaultRouter
from .views import EmailViewSet, CategoryViewSet, NoteViewSet, UserActionViewSet

router = DefaultRouter()
router.register(r'emails', EmailViewSet)
router.register(r'categories', CategoryViewSet)
router.register(r'notes', NoteViewSet)
router.register(r'user-actions', UserActionViewSet)

urlpatterns = [
    path('', include(router.urls)),
    path('auth/', include('rest_framework.urls')),
]


### 3. Designing Microservice APIs (10 Marks)

*a) Microservice design principles:*

i. *Service structure:*
- User Service: Handles authentication, user profiles
- Email Service: Manages email storage, retrieval, basic operations
- Category Service: Handles email categorization
- ML Service: Provides sorting and recommendations
- Notification Service: Handles real-time updates

ii. *Communication:*
- REST for synchronous communication between services
- Message queue (RabbitMQ/Redis) for async operations
- GraphQL for frontend-to-backend communication

iii. *API Gateway:*
- Routes requests to appropriate services
- Handles load balancing
- Manages authentication/authorization
- Implements rate limiting

*b) Example RESTful endpoints:*
python
# Email Service endpoints
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def email_list(request):
    queryset = Email.objects.filter(user=request.user)
    serializer = EmailSerializer(queryset, many=True)
    return Response(serializer.data)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def email_create(request):
    serializer = EmailSerializer(data=request.data)
    if serializer.is_valid():
        serializer.save(user=request.user)
        return Response(serializer.data, status=201)
    return Response(serializer.errors, status=400)

# OpenAPI documentation example
openapi_schema = {
    "openapi": "3.0.2",
    "info": {
        "title": "Email Service API",
        "version": "1.0.0",
    },
    "paths": {
        "/api/emails/": {
            "get": {
                "summary": "List all emails",
                "responses": {
                    "200": {
 "description": "List of emails",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {"$ref": "#/components/schemas/Email"}
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}


### 4. User Authentication (5 Marks)

*Implementation:*
python
# settings.py
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}

# For CSRF protection
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    # ...
]

# For rate limiting
REST_FRAMEWORK = {
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',
        'user': '1000/day'
    }
}

# JWT Token implementation
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView

urlpatterns = [
    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
]


## Part B: Frontend Development (20 Marks)

### 1. Email Catalog Implementation (5 Marks)

*a) Implementation:*
javascript
// React component example
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const EmailCatalog = () => {
    const [emails, setEmails] = useState([]);
    const [loading, setLoading] = useState(true);
    const [page, setPage] = useState(1);
    const [searchTerm, setSearchTerm] = useState('');
    
    useEffect(() => {
        const fetchEmails = async () => {
            try {
                const response = await axios.get(`/api/emails/?page=${page}&search=${searchTerm}`);
                setEmails(response.data.results);
                setLoading(false);
            } catch (error) {
                console.error('Error fetching emails:', error);
            }
        };
        
        fetchEmails();
    }, [page, searchTerm]);
    
    return (
        <div>
            <input
                type="text"
                placeholder="Search emails..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
            />
            
            {loading ? (
                <p>Loading...</p>
            ) : (
                <ul>
                    {emails.map(email => (
                        <li key={email.id}>
                            <h3>{email.subject}</h3>
                            <p>From: {email.sender}</p>
                            <p>{email.body.substring(0, 100)}...</p>
                        </li>
</li>
                    ))}
                </ul>
            )}
            
            <button onClick={() => setPage(p => Math.max(1, p - 1))}>Previous</button>
            <button onClick={() => setPage(p => p + 1)}>Next</button>
        </div>
    );
};


### 2. Real-Time Sorting and Notifications (5 Marks)

*Implementation:*
python
# Django Channels for WebSockets
# consumers.py
import json
from channels.generic.websocket import AsyncWebsocketConsumer

class NotificationConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.user = self.scope['user']
        if self.user.is_anonymous:
            await self.close()
        else:
            self.group_name = f'user_{self.user.id}'
            await self.channel_layer.group_add(self.group_name, self.channel_name)
            await self.accept()

    async def disconnect(self, close_code):
        await self.channel_layer.group_discard(self.group_name, self.channel_name)

    async def receive(self, text_data):
        data = json.loads(text_data)
        # Handle incoming messages if needed

    async def send_notification(self, event):
        await self.send(text_data=json.dumps(event['data']))

# Frontend WebSocket connection
const socket = new WebSocket(`ws://${window.location.host}/ws/notifications/`);

socket.onmessage = function(e) {
    const data = JSON.parse(e.data);
    if (data.type === 'NEW_EMAIL') {
        showNotification(`New email from ${data.sender}: ${data.subject}`);
    } else if (data.type === 'CATEGORY_UPDATE') {
        updateEmailCategory(data.email_id, data.category);
    }
};


### 3. User Notes and Comments (5 Marks)

*Implementation:*
python
# Backend API
@api_view(['POST'])
@permission_classes([IsAuthenticated])
def create_note(request, email_id):
    try:
        email = Email.objects.get(id=email_id, user=request.user)
    except Email.DoesNotExist:
        return Response({'error': 'Email not found'}, status=404)
    
    serializer = NoteSerializer(data=request.data)
    if serializer.is_valid():
        serializer.save(email=email, author=request.user)
        return Response(serializer.data, status=201)
    return Response(serializer.errors, status=400)

# Frontend component
const EmailNotes = ({ emailId }) => {
    const [notes, setNotes] = useState([]);
    const [newNote, setNewNote] = useState('');
    
    useEffect(() => {
        axios.get(`/api/emails/${emailId}/notes/`)
            .then(response => setNotes(response.data))
            .catch(error => console.error('Error fetching notes:', error));
    }, [emailId]);
    
    const handleSubmit = (e) => {
        e.preventDefault();
        axios.post(`/api/emails/${emailId}/notes/`, { content: newNote })
            .then(response => {
                setNotes([...notes, response.data]);
                setNewNote('');
            })
            .catch(error => console.error('Error creating note:', error));
    };
    
    return (
        <div>
            <h3>Notes</h3>
            <ul>
                {notes.map(note => (
tes.map(note => (
                    <li key={note.id}>
                        <p>{note.content}</p>
                        <small>By {note.author} on {new Date(note.created_at).toLocaleString()}</small>
                    </li>
                ))}
            </ul>
            
            <form onSubmit={handleSubmit}>
                <textarea
                    value={newNote}
                    onChange={(e) => setNewNote(e.target.value)}
                    minLength={10}
                    required
                />
                <button type="submit">Add Note</button>
            </form>
        </div>
    );
};


### 4. Enhancing User Experience with GraphQL APIs (5 Marks)

*Implementation:*
python
# GraphQL schema
import graphene
from graphene_django import DjangoObjectType
from .models import Email, Category

class EmailType(DjangoObjectType):
    class Meta:
        model = Email
        fields = '__all__'

class CategoryType(DjangoObjectType):
    class Meta:
        model = Category
        fields = '__all__'

class Query(graphene.ObjectType):
    emails = graphene.List(EmailType, search=graphene.String())
    email = graphene.Field(EmailType, id=graphene.ID())
    
    def resolve_emails(self, info, search=None, **kwargs):
        user = info.context.user
        if not user.is_authenticated:
            return []
        
        queryset = Email.objects.filter(user=user)
        if search:
            queryset = queryset.filter(
                Q(subject__icontains=search) | 
                Q(body__icontains=search) |
                Q(sender__icontains=search)
            )
        return queryset
    
    def resolve_email(self, info, id, **kwargs):
        user = info.context.user
        if not user.is_authenticated:
            return None
        return Email.objects.filter(user=user, id=id).first()

schema = graphene.Schema(query=Query)

# Frontend GraphQL query
const GET_EMAILS = gql`
    query GetEmails($search: String) {
        emails(search: $search) {
            id
            subject
            sender
            receivedAt
            isRead
            categories {
                name
            }
        }
    }
`;

function EmailList() {
    const { loading, error, data } = useQuery(GET_EMAILS);
    
    if (loading) return <p>Loading...</p>;
    if (error) return <p>Error :(</p>;
    
    return (
        <ul>
            {data.emails.map(email => (
                <li key={email.id}>
                    <h3>{email.subject}</h3>
                    <p>From: {email.sender}</p>
                    <p>Categories: {email.categories.map(c => c.name).join(', ')}</p>
                </li>
            ))}
        </ul>
    );
}


## Part C: Machine Learning and API Integration (20 Marks)

### 1. Integrating Machine Learning for Email Sorting (10 Marks)

*a) Implementation:*
python
# ML Service
import joblib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

app = FastAPI()
# Load pre-trained model and vectorizer
model = joblib.load('email_classifier.pkl')
vectorizer = joblib.load('tfidf_vectorizer.pkl')

class EmailData(BaseModel):
    subject: str
    body: str
    sender: str

@app.post("/classify/")
async def classify_email(email_data: EmailData):
    try:
        # Combine features
        text = f"{email_data.subject} {email_data.body}"
        
        # Transform text
        features = vectorizer.transform([text])
        
        # Predict
        category_id = model.predict(features)[0]
        confidence = model.predict_proba(features).max()
        
        return {
            "category_id": int(category_id),
            "category_name": CATEGORY_NAMES[category_id],
            "confidence": float(confidence)
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# Dockerfile for ML service
FROM python:3.9-slim

WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt

COPY . .

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]


*b) Django integration with ML service:*
python
# tasks.py (Celery task)
import requests
from celery import shared_task

@shared_task
def classify_and_sort_email(email_id):
    try:
        email = Email.objects.get(id=email_id)
        
        # Prepare data for ML service
        data = {
            "subject": email.subject,
            "body": email.body,
            "sender": email.sender
        }
        
        # Call ML service
        response = requests.post(
            "http://ml-service:8000/classify/",
            json=data,
            timeout=10
        )
        response.raise_for_status()
        
        result = response.json()
        
        # Get or create category
        category, _ = Category.objects.get_or_create(
            name=result['category_name'],
            defaults={'description': 'Auto-generated by ML'}
        )
        
        # Update email
        email.categories.add(category)
        email.save()
        
        # Notify user via WebSocket
        channel_layer = get_channel_layer()
        async_to_sync(channel_layer.group_send)(
            f"user_{email.user.id}",
            {
                "type": "send.notification",
                "data": {
                    "type": "EMAIL_SORTED",
                    "email_id": email.id,
                    "category": category.name
                }
            }
        )
        
        return True
    except Exception as e:
        logger.error(f"Error classifying email {email_id}: {str(e)}")
        return False


### 2. Real-Time Email Recommendations (10 Marks)

*a) Implementation:*
```python
# Recommendation engine
from collections import defaultdict
import numpy as np

class Recommender:
    def _init_(self):
        self.user_actions = defaultdict(list)
        self.email_features = {}
        self.user_similarity = {}
    
    def record_action(self, user_id, email_id, action_type):
        self.user_actions[user_id].append ((email_id, action_type))
        
        # Update similarity matrix periodically
        if len(self.user_actions[user_id]) % 10 == 0:
            self._update_similarity()
    
    def _update_similarity(self):
        # Simple collaborative filtering implementation
        all_users = list(self.user_actions.keys())
        n_users = len(all_users)
        
        # Create user-item matrix
        user_item = np.zeros((n_users, len(self.email_features)))
        
        for i, user_id in enumerate(all_users):
            for email_id, action_type in self.user_actions[user_id]:
                if email_id in self.email_features:
                    j = self.email_features[email_id]['index']