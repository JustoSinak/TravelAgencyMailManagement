import requests
import logging
from celery import shared_task
from asgiref.sync import async_to_sync
from channels.layers import get_channel_layer
from .models import Email, Category

logger = logging.getLogger(__name__)

@shared_task
def classify_and_sort_email(email_id):
    try:
        email = Email.objects.get(id=email_id)
        
        data = {
            "subject": email.subject,
            "body": email.body,
            "sender": email.sender
        }
        
        response = requests.post(
            "http://ml-service:8000/classify/",
            json=data,
            timeout=10
        )
        response.raise_for_status()
        
        result = response.json()
        
        category, _ = Category.objects.get_or_create(
            name=result['category_name'],
            defaults={'description': 'Auto-generated by ML'}
        )
        
        email.categories.add(category)
        email.save()
        
        channel_layer = get_channel_layer()
        async_to_sync(channel_layer.group_send)(
            f"user_{email.user.id}",
            {
                "type": "send.notification",
                "data": {
                    "type": "EMAIL_SORTED",
                    "email_id": email.id,
                    "category": category.name
                }
            }
        )
        
        return True
    except Exception as e:
        logger.error(f"Error classifying email {email_id}: {str(e)}")
        return False
